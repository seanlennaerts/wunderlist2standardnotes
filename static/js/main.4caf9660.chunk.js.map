{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["JSZip","require","generateUUID","crypto","window","msCrypto","buf","Uint32Array","getRandomValues","idx","replace","c","r","toString","d","Date","getTime","performance","now","Math","random","floor","App","props","handleSubmit","bind","handleCheck","export","unzip","fileInput","React","createRef","state","lists","selected","error","sn","items","i","this","length","list","push","created_at","createdAt","updated_at","getMostRecentDate","tasks","uuid","content_type","content","title","text","buildNote","references","filename","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","download","JSON","stringify","latest","task","note","completed","event","preventDefault","setState","current","files","then","o","catch","e","parseInt","target","name","file","Promise","resolve","reject","loadAsync","zip","async","data","parse","trim","className","buildLists","listDivs","key","type","checked","onChange","buildTasks","taskDivs","filteredTasks","filter","href","rel","src","alt","accept","ref","onClick","role","aria-label","showError","showInstructions","showLists","showExport","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4caf9660.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nvar JSZip = require(\"jszip\");\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleCheck = this.handleCheck.bind(this);\n    this.export = this.export.bind(this);\n    this.unzip = this.unzip.bind(this);\n    this.fileInput = React.createRef();\n\n    this.state = { lists: [], selected: [], error: '' };\n  }\n\n  export() {\n    let sn = { items: [] };\n    for (let i = 0; i < this.state.lists.length; i++) {\n      if (this.state.selected[i]) {\n        let list = this.state.lists[i];\n        // start building standard notes json\n        sn.items.push(\n          {\n            created_at: new Date(list.createdAt),\n            updated_at: this.getMostRecentDate(list.tasks),\n            uuid: generateUUID(),\n            content_type: \"Note\",\n            content: {\n              title: list.title,\n              text: this.buildNote(list.tasks),\n              references: [],\n            }\n          }\n        );\n      }\n    }\n    download('sn-import-file.txt', JSON.stringify(sn));\n  }\n\n  getMostRecentDate(tasks) {\n    let latest = new Date(tasks[0].createdAt);\n    for (let task of tasks) {\n      let d = new Date(task.createdAt)\n      if (d > latest) {\n        latest = d;\n      }\n    }\n    return latest;\n  }\n\n  buildNote(tasks) {\n    let note = '';\n    for (let task of tasks) {\n      if (!task.completed) {\n        note = note + task.title + '\\r\\n\\r\\n';\n      }\n    }\n    return note;\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.setState({ lists: [], selected: [], error: '' });\n    this.unzip(this.fileInput.current.files[0])\n      .then(o => this.setState(o))\n      .catch(e => this.setState({error: e}));\n  }\n\n  handleCheck(event) {\n    let selected = this.state.selected;\n    selected[parseInt(event.target.name)] = !selected[parseInt(event.target.name)];\n    this.setState({ selected });\n  }\n\n  unzip(file) {\n    return new Promise((resolve, reject) => {\n      JSZip.loadAsync(file)\n        .then(zip => {\n          if (!zip.files['Tasks.json']) {\n            reject(`Couldn't use this file :(`);\n            return;\n          }\n          zip\n            .file('Tasks.json')\n            .async('string')\n            .then(data => {\n              let lists = JSON.parse(data.trim());\n              let selected = [];\n              for (let i = 0; i < lists.length; i++) {\n                selected.push(true);\n              }\n              resolve({lists, selected});\n            });\n        });\n    });\n  }\n\n  showLists() {\n    return (\n      <div className=\"previewPane\">\n        <h3>Found the following lists:</h3>\n        <p>Unselect any lists you don't want to export.</p>\n        <div className=\"lists\">\n          {this.buildLists()}\n        </div>\n      </div>\n    );\n  }\n\n  buildLists() {\n    let listDivs = [];\n    for (let i = 0; i < this.state.lists.length; i++) {\n      let list = this.state.lists[i];\n      listDivs.push(\n        <div key={i}>\n          <div className=\"listTitle\">\n            <input type=\"checkbox\" name={i} checked={this.state.selected[i]} onChange={this.handleCheck} />\n            {list.title}\n          </div>\n          <ul>\n            {this.buildTasks(list.tasks)}\n          </ul>\n        </div>\n      );\n    }\n    return listDivs;\n  }\n\n  buildTasks(tasks) {\n    const limit = 5;\n    let taskDivs = [];\n    let filteredTasks = tasks.filter(task => !task.completed);\n    for (let i = 0; i < limit && i < filteredTasks.length; i++) {\n      taskDivs.push(\n        <li key={i}>{tasks[i].title}</li>\n      );\n    }\n    if (filteredTasks.length > limit) {\n      taskDivs.push(<li key='more'>{`...${filteredTasks.length - limit} more`}</li>)\n    }\n    return taskDivs;\n  }\n\n  showInstructions() {\n    return (\n      <div className=\"instructionPane\">\n        <h3>Instructions</h3>\n        <div className=\"instructions\">\n          <ol>\n            <li>\n              <p>Go to <a href=\"https://www.wunderlist.com\" target=\"_blank\" rel=\"noopener noreferrer\">wunderlist.com</a></p>\n            </li>\n            <li>\n              <p>Click on your name and then <b>Account Settings</b></p>\n              <img src=\"/wunderlist2standardnotes/1.png\" alt=\"screenshot of instruction\" />\n            </li>\n            <li>\n              <p>In the <b>Account</b> tab click <b>Create Export</b></p>\n              <img src=\"/wunderlist2standardnotes/2.png\" alt=\"screenshot of instruction\" />\n            </li>\n            <li>\n              <p>Enter your email address so they can send you your Wunderlist data</p>\n              <img src=\"/wunderlist2standardnotes/3.png\" alt=\"screenshot of instruction\" />\n            </li>\n            <li>\n              <p>Wait for the email to arrive (should take a few minutes). When you get the email follow the link to download your Wunderlist .zip file</p>\n            </li>\n            <li>\n              <p>Upload the .zip file here:</p>\n              <input type=\"file\" accept=\".zip\" ref={this.fileInput} onChange={this.handleSubmit} />\n            </li>\n            <li>\n              <p>Preview the lists to the right and unselect any of the lists you don't want to migrate</p>\n            </li>\n            <li>\n              <p>Click on the blue <b>Export</b> button below. This should download a .txt file</p>\n            </li>\n            <li>\n              <p>Now in Standard Notes, go to <b>Account</b> and click on <b>Import Backup</b></p>\n              <img src=\"/wunderlist2standardnotes/4.png\" alt=\"screenshot of instruction\" />\n            </li>\n            <li>\n              <p>Select the sn-import-file.txt file that just downloaded. That should be it! Let me know if anything breaks</p>\n            </li>\n          </ol>\n        </div>\n      </div>\n    );\n  }\n\n  showExport() {\n    return (\n      <div className=\"export\" onClick={this.export}>{`Export ${this.state.selected.filter(title => title).length} lists`}</div>\n    );\n  }\n\n  showError() {\n    return (\n      <div className=\"error\">{this.state.error}</div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <h1>Wunderlist <span role=\"img\" aria-label=\"right arrow\">➡️</span> Standard Notes</h1>\n        </div>\n        <div className=\"body\">\n          {this.state.error.length > 0 ? this.showError() : null}\n          <div className=\"columns\">\n            {this.showInstructions()}\n            {this.state.lists.length > 0 ? this.showLists() : null}\n          </div>\n        </div>\n        {this.state.selected.filter(title => title).length > 0 ? this.showExport() : null}\n      </div>\n    );\n  }\n}\n\n// ============== helpers ====================\n\n// Taken from https://github.com/standardnotes/sntools/blob/master/lib/sntools.js#L3\nfunction generateUUID() {\n  var crypto = window.crypto || window.msCrypto;\n  if (crypto) {\n    var buf = new Uint32Array(4);\n    crypto.getRandomValues(buf);\n    var idx = -1;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      idx++;\n      var r = (buf[idx >> 3] >> ((idx % 8) * 4)) & 15;\n      var v = c == 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  } else {\n    var d = new Date().getTime();\n    if (window.performance && typeof window.performance.now === \"function\") {\n      d += performance.now(); //use high-precision timer if available\n    }\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = (d + Math.random() * 16) % 16 | 0;\n      d = Math.floor(d / 16);\n      return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n    return uuid;\n  }\n}\n\nfunction download(filename, text) {\n  var element = document.createElement('a');\n  element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n  element.setAttribute('download', filename);\n\n  element.style.display = 'none';\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}